import 'dart:async';
import 'dart:convert' show json;

import 'package:flutter/material.dart';

import "package:http/http.dart" as http;
import 'package:google_maps_flutter/google_maps_flutter.dart';
import 'package:geolocator/geolocator.dart';
import 'package:flutter/services.dart';
import 'package:datetime_picker_formfield/datetime_picker_formfield.dart';
import 'package:intl/intl.dart';

import 'package:virus_tracker/locationPage/locationForm.dart';
import 'package:virus_tracker/locationPage/locationService.dart';

import 'package:virus_tracker/globals.dart' as globals;

import 'location.dart';

class LocationList extends StatefulWidget {
  @override
  State createState() => LocationListState();
}

class LocationListState extends State<LocationList> {
  LocationService locationService = LocationService();
  final GlobalKey<ScaffoldState> _scaffoldKey = GlobalKey<ScaffoldState>();

  List<Location> _locations = <Location>[];

  var updatePeriod;

  LocationListState() {
    updatePeriod = Timer.periodic(Duration(seconds: 1), (timer) {
      updateList();
    });
    Timer.periodic(Duration(seconds: 1), (timer) {
      if (mounted) {
        setState(() {
          _locations = globals.locationList;
        });
      }
    });
  }

  @override
  void initState() {
    super.initState();
    updateList();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      key: _scaffoldKey,
      appBar: AppBar(
        title: Center(child: Text('Locations List',textAlign: TextAlign.center)),
        backgroundColor: Colors.green,
      ),
      body: SafeArea(
        top: false,
        bottom: false,
        child: _buildLocationList(),
      ),
      floatingActionButton: FloatingActionButton(
        tooltip: 'Increment',
        onPressed: () {
          Navigator.of(context).push(MaterialPageRoute(
              builder: (BuildContext context) => LocationForm(23,121,'home')));
        },
        child: Icon(Icons.add),
      ),
    );
  }

  Future<void> updateList() async {
    if (!mounted) {
      return;
    }
    await locationService.getLocations().then((val) => setState(() {
          updatePeriod.cancel();
          if (val != null) {
            globals.locationList = val;
            _locations = globals.locationList;
            updatePeriod = Timer.periodic(Duration(seconds: 60), (timer) {
              updateList();
            });
          } else {
            updatePeriod = Timer.periodic(Duration(seconds: 2), (timer) {
              updateList();
              showMessage('connection error!', Colors.red);
            });
          }
        }));
  }

  Widget _buildLocationList() {
    if (globals.locationList.isEmpty) {
      // showMessage('There is currently no location in the list yet');
    }
    return ListView.separated(
      padding: const EdgeInsets.symmetric(vertical: 5),
      padding: const EdgeInsets.all(16),
      itemCount: _locations.length,
      itemBuilder: (BuildContext _context, int i) {
        return _buildRow(_locations[i]);
      },
      separatorBuilder: (BuildContext context, int index) => const Divider(),
    );
  }

  Widget _buildRow(Location location) {
    return ListTile(
      leading: _infectLevelIcon(location.infection_level),
      title: Text(location.location_name),
      subtitle: Text(
          DateFormat('yyyy-MM-dd HH:mm:ss').format(location.datetime_from) +
              '~' +
              DateFormat('yyyy-MM-dd HH:mm:ss').format(location.datetime_to)),
      trailing: IconButton(
          icon: Icon(Icons.delete),
          onPressed: () {
            _deleteCheck(location);
            locationService.getLocations().then((val) => setState(() {
                  globals.locationList = val;
                }));
          }),
      onTap: null,
    );
  }

  Icon _infectLevelIcon(infect_level) {
    Color levelColor;
    if (infect_level == 3) {
      levelColor = Colors.red;
    } else if (infect_level == 2) {
      levelColor = Colors.orange;
    } else if (infect_level == 1) {
      levelColor = Colors.yellow;
    } else {
      levelColor = Colors.green;
    }
    return Icon(Icons.brightness_1, color: levelColor);
  }

  Future<void> _deleteCheck(Location location) async {
    return showDialog<void>(
      context: context,
      barrierDismissible: false, // user must tap button!
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('Are you sure you want to delete \"' +
              location.location_name +
              '\" ?'),
          content: SingleChildScrollView(
            child: ListBody(children: <Widget>[
              Text('This action cannot be undone.'),
            ]),
          ),
          actions: <Widget>[
            FlatButton(
              child: Text('no'),
              onPressed: () {
                Navigator.of(context).pop();
              },
            ),
            FlatButton(
              child: Text('yes'),
              onPressed: () {
                Navigator.of(context).pop();
                locationService.deleteLocations(location);
                showMessage('deleting "' + location.location_name + '" ...');
                Future.delayed(const Duration(milliseconds: 500), () {
                  setState(() {
                    updateList();
                  });
                });
              },
            ),
          ],
        );
      },
    );
  }
  // @override
  // Widget build(BuildContext context) {
  //   return Scaffold(
  //     // Add from here...
  //     appBar: AppBar(
  //       title: Text('Startup Name Generator'),
  //       actions: <Widget>[
  //         IconButton(icon: Icon(Icons.list), onPressed: _pushSaved),
  //       ],
  //     ),
  //     body: _buildSuggestions(),
  //   );
  // }

  void showMessage(String message, [MaterialColor color = Colors.blue]) {
    _scaffoldKey.currentState
        .showSnackBar(SnackBar(backgroundColor: color, content: Text(message,style: TextStyle(color: Colors.white),)));
  }
}
