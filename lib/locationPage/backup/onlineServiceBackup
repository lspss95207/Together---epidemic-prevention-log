import 'package:http/http.dart' as http;
import 'dart:async';
import 'dart:convert';
import '../globals.dart' as globals;

import 'location.dart';

class LocationService {

//online
static const _serviceUrl = 'https://lspss95207.duckdns.org/query.php';
  Future<Location> createLocation(Location locationTime) async {
    await globals.updateIDToken();
    try {
      var json = locationTime.toJson();
      final response = await http.post(_serviceUrl, body: {
        'id_token': globals.id_token,
        'query_type': 'insert_location',
        'data': json
      });
      print('Response status: ${response.statusCode}');
      print('Response body: ${response.body}');
      return locationTime;
    } catch (e) {
      print('Server Exception!!!');
      print(e);
      return null;
    }
  }

  Future<List<Location>> getLocations() async {
    await globals.updateIDToken();
    print("");
    print("idtoken");
    print(globals.id_token);
    var locations = <Location>[];
    var locations_raw;
    var data;
    
    try {
      final response = await http.post(_serviceUrl, body: {
        'id_token': globals.id_token,
        'query_type': 'get_locations',
      });
      print('Response status: ${response.statusCode}');
      // printWrapped('Response body: ${response.body}');
      data = jsonDecode(response.body);
      locations_raw = data['locations'];
    } catch (e) {
      print('Server Exception!!!');
      print(e);
      return null;
    }
    // print(data);
    for (var location in locations_raw) {
      if(location['location_name'] == null){
        continue;
      }
      var tmp = Location();
      tmp.id = location['id'];
      tmp.location_name = location['location_name'];
      tmp.address = location['address'];
      tmp.latitude = double.parse(location['latitude']);
      tmp.longitude = double.parse(location['longitude']);
      tmp.datetime_from = DateTime.parse(location['datetime_from']);
      tmp.datetime_to = DateTime.parse(location['datetime_to']);
      tmp.people_with = location['people_with'];
      tmp.infection_level = int.parse(location['infection_level']);
      locations.add(tmp);
    }
    globals.locationList = locations;
    return locations;
  }




  Future<void> deleteLocations(Location location) async {
    await globals.updateIDToken();
    try {
      final response = await http.post(_serviceUrl, body: {
        'id_token': globals.id_token,
        'query_type': 'delete_location',
        'data': jsonEncode({'location_id': location.id})
      });
      // print(id_token);
      print('Response status: ${response.statusCode}');
      print('Response body: ${response.body}');
      globals.locationList.remove(location);
    } catch (e) {
      print('Server Exception!!!');
      print(e);
    }
  }

}



void printWrapped(String text) {
  final pattern = RegExp('.{1,800}'); // 800 is the size of each chunk
  pattern.allMatches(text).forEach((match) => print(match.group(0)));
}
